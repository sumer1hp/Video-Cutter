class ExportManager {
    constructor() {
        this.ffmpeg = null;
        this.isFFmpegLoaded = false;
        this.isLoading = false;
        this.isProcessing = false;
        this.loadFFmpeg();
    }

    async loadFFmpeg() {
        if (this.isLoading) return;
        this.isLoading = true;
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º FFmpeg –∏–∑ CDN (–≤–µ—Ä—Å–∏—è 0.11.6)...');
            await this.loadScript('https://unpkg.com/@ffmpeg/ffmpeg@0.11.6/dist/ffmpeg.min.js');
            if (typeof createFFmpeg === 'undefined') {
                throw new Error('FFmpeg –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏–∑ CDN');
            }
            this.ffmpeg = createFFmpeg({
                log: true,
                corePath: 'https://unpkg.com/@ffmpeg/core@0.11.6/dist/ffmpeg-core.js'
            });
            await this.ffmpeg.load();
            this.isFFmpegLoaded = true;
            this.isLoading = false;
            console.log('‚úÖ FFmpeg —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FFmpeg:', error);
            this.isFFmpegLoaded = false;
            this.isLoading = false;
            this.showFFmpegError();
        }
    }

    loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    showFFmpegError() {
        console.error('‚ùå FFmpeg –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        if (typeof this.onError === 'function') {
            this.onError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ–¥–≤–∏–∂–æ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }

    async waitForLoad() {
        if (this.isFFmpegLoaded) return true;
        const maxWaitTime = 20000;
        const startTime = Date.now();
        while (!this.isFFmpegLoaded && (Date.now() - startTime) < maxWaitTime) {
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        return this.isFFmpegLoaded;
    }

    async processVideoSegments(videoFile, segments) {
        if (this.isProcessing) {
            throw new Error('–£–∂–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        }
        this.isProcessing = true;
        try {
            const isLoaded = await this.waitForLoad();
            if (!isLoaded) {
                throw new Error('FFmpeg –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }

            if (videoFile.size > 500 * 1024 * 1024) {
                const shouldContinue = confirm(
                    `–í–∏–¥–µ–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ (${this.formatFileSize(videoFile.size)}). ` +
                    `–ù–∞—Ä–µ–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
                );
                if (!shouldContinue) throw new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            }

            const results = [];
            for (let i = 0; i < segments.length; i++) {
                const segment = segments[i];
                try {
                    console.log(`üî™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç ${i + 1}/${segments.length}`);
                    const result = await this.processSingleSegment(videoFile, segment, i + 1);
                    results.push(result);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ${i + 1}:`, error.message);
                    results.push({
                        success: false,
                        segment: segment,
                        index: i + 1,
                        error: error.message
                    });
                }
            }
            return results;
        } finally {
            this.isProcessing = false;
        }
    }

    async processSingleSegment(videoFile, segment, index) {
        if (!this.ffmpeg) throw new Error('FFmpeg –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        if (segment.duration <= 0) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞');

        try {
            const arrayBuffer = await this.readFileAsArrayBuffer(videoFile);
            this.ffmpeg.FS('writeFile', 'input.mp4', new Uint8Array(arrayBuffer));

            await this.ffmpeg.run(
                '-i', 'input.mp4',
                '-ss', segment.start.toString(),
                '-t', (segment.end - segment.start).toString(),
                '-c', 'copy',
                '-avoid_negative_ts', 'make_zero',
                `segment_${index}.mp4`
            );

            const data = this.ffmpeg.FS('readFile', `segment_${index}.mp4`);
            if (data.length === 0) throw new Error('–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');

            const blob = new Blob([data.buffer], { type: 'video/mp4' });
            const url = URL.createObjectURL(blob);
            return {
                success: true,
                segment: segment,
                index: index,
                outputUrl: url,
                outputSize: blob.size,
                fileName: `segment_${index}_${segment.startFormatted.replace(/:/g, '-')}_to_${segment.endFormatted.replace(/:/g, '-')}.mp4`,
                blob: blob
            };
        } finally {
            this.cleanupFiles([`segment_${index}.mp4`, 'input.mp4']);
        }
    }

    async readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsArrayBuffer(file);
        });
    }

    cleanupFiles(filenames) {
        filenames.forEach(filename => {
            try {
                this.ffmpeg.FS('unlink', filename);
            } catch (e) {
                console.warn(`–ù–µ —É–¥–∞–ª—ë–Ω: ${filename}`);
            }
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    exportMarkers(markers) {
        const data = JSON.stringify({ markers, exportDate: new Date().toISOString(), version: '1.0' }, null, 2);
        this.downloadFile(data, `video_markers_${this.formatTimestamp()}.json`, 'application/json');
    }

    importMarkers(callback) {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (ev) => {
                    try {
                        const d = JSON.parse(ev.target.result);
                        if (d.markers && Array.isArray(d.markers)) callback(d.markers);
                        else alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                    } catch (err) {
                        alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ' + err.message);
                    }
                };
                reader.readAsText(file);
            }
        };
        input.click();
    }

    downloadSegmentsInfo(segments) {
        const content = segments.map((s, i) =>
            `–°–µ–≥–º–µ–Ω—Ç ${i + 1}: ${s.startFormatted} - ${s.endFormatted} (${this.formatDuration(s.duration)})`
        ).join('\n');
        this.downloadFile(content, `video_segments_${this.formatTimestamp()}.txt`, 'text/plain');
    }

    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    formatDuration(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}–º ${secs}—Å`;
    }

    formatTimestamp() {
        return new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    }

    destroy() {
        if (this.ffmpeg) {
            try { this.ffmpeg.exit(); } catch (e) { console.warn('FFmpeg exit error:', e); }
        }
    }
}
